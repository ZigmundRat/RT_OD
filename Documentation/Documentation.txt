Installation

This document will walk you through setting up this project and configuring the components required
The core operations of this program "Object Recognition" is derived from following the Blog Lessons of Adrian Rosebrock.  

Adrian, his blog, Lessons and related information can be located at https://www.pyimagesearch.com/ Adrian's site is a wealth of information and educational
materials for anyone interested in learning more about Machine learning based Object Recognition.

This Object detection software requires an RTSP camera feed in order to function. Low quality camera feeds work best as they require the lease amount of CPU time

Components
	1. Real Time Object Detection - Core Module RT_OD.py
		This is the core of this program where all the magic happens
	2. Email Messaging
		This module handles the sending of email alerts if configured
		An Email account is required that supports basic authentication. basic authentication isn't great and is being phased out by many providers
		you milage may vary with this feature.  for example with gmail https://ugtechmag.com/enable-basic-authentication-gmail-account/ even once enabled 
		I find gmail resets this value to off stopping the use of email from this application after a few days. I prefer MMS messaging personally
	3. SMS Messaging
		This module handles the sending of SMS (Text Messages) messages via Twilio if configure. 
		This function reaquires a Paid messaging subscription from Twilio https://www.twilio.com/messaging
		You must generate an API key https://www.twilio.com/docs/iam/keys/api-key-resource and https://www.twilio.com/console/project/api-keys
		You must also register a phone number with Twilio to be used to send messages from
	4. MMS Messaging
		This module handles the sending of MMS (Text Messages with attached images) messages via Twilio if configure. 
		This function requires a Paid messaging subscription from Twilio https://www.twilio.com/messaging
		This function also requires a DropBox account in order to upload, store and provide a publicly accessible URL for Twilio to grab the images from
		You must generate an API key https://www.twilio.com/docs/iam/keys/api-key-resource and https://www.twilio.com/console/project/api-keys
		You must also register a phone number with Twilio to be used to send messages from
		SMS and MMS use the same Twilio account and information. Registering once will allow both modules to function
		$20 of credit loaded onto Twilio covers my MMS notifications for approx 6-8 weeks. Approx 600 MMS Messages. However this will depend on how many notifications your system generates
	5. DropBox
		This module is used to upload and store detection event images. It is also used to provide publicly accessible URL's for use with Twilio for sending MMS messages
		A Free DropBox account is sufficient https://www.dropbox.com/
		You must generate a dropbox API key for use with this app http://99rabbits.com/get-dropbox-access-token/

Windows Setup
	1. Download and install Anaconda
		Download Link https://www.anaconda.com/products/individual#windows
		Installation Instructions https://docs.anaconda.com/anaconda/install/windows/ Pretty much leave default and just hit next, next, finish
		Anaconda is a data science tool kit that will allow us to create a virtual envronment on windows machines to run python and linux packages. 
		It is free for personal home use

		Restart Your computer before proceeding to step 2.  

	2. Create a virtual environment in anaconda from the windows command prompt
		open the command prompt
		issue the following command - "conda create --name opencv-env python=3.7" to create a virtual python environment named opencv-env
		Confirm the prompt asking to install required compnonents for running python in the virtual envrionment
	3. Activate the environment from the command prompt with the command "activate opencv-env"
		Note all work needs to be done in the "opencv-env" virtual envronment.  Everytime you want to run or work on the project you must load this envronment
		or your project will not funtion due to missing dependencies
	4. continue and run the linux setup steps from within this virtual environment

Configuration File 
	1. Rename the file "ConfigValuesTemplay.py" to "ConfigValues.py"
	2. Open the file in your prefered editor. If you don't have an editor Notepad, Nano, or Vi will work
	3. Complete the configuration file with information from your own accounts for the following services
		DropBox
		Email 
		Twilio
		Destination Phone Number\s for alerting

Linux Setup
	1. If you are continuing from the windows install steps jump to step 2. If this is a linux install open a new terminal window
	2. Run the following list of commands one at a time to install the required components
	   OpenCV supports offloading of video processing to GPU
	   If you plan to use Nvidia GPU (Cuda) Skip installing the openCV-contrib-python this module is precompiled for CPU support
	   for Nvidia Cuda GPU support you will have to manually compile OpenCV with the correct GPU features enabled
		
		pip install setuptools
		pip install imutils
		pip install numpy
		pip install twilio
		pip install dropbox
		pip install opencv-contrib-python

		If installing on Raspbery Pi use these commands instead of the above
			pip install setuptools
			pip install imutils
			pip install numpy
			pip install twilio
			pip install dropbox
			pip install opencv-contrib-python
			pip3 install opencv-contrib-python==4.1.0.25
			sudo apt install libhdf5-100
			sudo apt install libatlas3-base
			sudo apt install libjasper1
			sudo apt install libqtgui4
			sudo atp install libqt4-test

	3. Download the Github repository https://github.com/mattolan/RT_OD as a ZIP file
	4. Extract the contents of the Zip file to a directory of your choosing.
	6. You are now ready to launch the software.

Launching the Object Detection Software
	1. Launch a terminal windows 
	2. If running on windows activate the virtual environment with the following command
		activate opencv-env
	3. launch the software with the following example command
		python RT_OD.py -v "rtsp://192.168.1.1:7447/5cc263923cc_2" -n "Front Door Camera"  -rsy 2 -rsx 125 -rey 358 -rex 638 -ac 5 -asph 22 -aspm 00 -aeph 7 -aepm 00

		The command command can be modified to suit your needs.
		You can execute the command multiple times to stream multiple RTSP feeds from different cameras

		Parameters
		-v		This is the RTSP feed from the camera to be monitored. You must aquire this from your camera or NVR system. It will be 
				Unique for each camera you wish to monitor
		-n		This is a name of your choosing that describes the camera
				
				All values starting with -r are used to define the "Region of Interest" This is the area of a video feed that you wish to monitor for people
				all four values are required and are used to draw a box across the RTSP stream representing the area being monitored
		-rsy	ROI Start Y axis pixel location
		-rsx	ROI Start X axis pixel location
		-rey	ROI End Y axis pixel location
		-rex	ROI End X axis pixel location

		-ac		This is the cool down period in minutes to wait between sending alerts. 
				For example if you set this to 5 you will only recieve an alert for a person in the camera feed every 5 minutes 
				(assuming of course that there is a person in the feed)

				All as and ae values are optional Set these values if you wish to only recieve alerts during a specified time frame. 
				This command assumes a 24 hour clock
				For example if you only want alerts from 10pm until 7am (the example command provided)
				If you want alerts all the time you can delete these parameters from the command
		-asph	Alert Start Period Hour
		-aspm	Alert Start Period Minute
		-aeph	Alert End Period Hour
		-aepm	Alert End Period Minue


Optional Linux GPU Setup (Nvidia Cuda) (Nvidia Jetson Nano Setup)
	This section is derived from following this blog https://www.pyimagesearch.com/2020/03/25/how-to-configure-your-nvidia-jetson-nano-for-computer-vision-and-deep-learning/
	It is specific to the Nvidia Jetson Nano, but should work in theory for any system with the proper Nvidia graphics card supporting Cuda technology installed
	
	below is the list of commands I ran to download \ compile \ and install OpenCV to use GPU. This is using OpenCV 4.3.0 There is probably
	a newer version that can be substituded at this time. all commands are run in a linux terminal.

	This block of commands is to cleanup any old openCV files you may have laying arround 
	(if you have never done anything with OpenCV this block will not do anything)
		
		rm -rf opencv
		rm -rf opencv_contrib
		rm opencv.zip
		rm opencv_contrib.zip

	Download the OpenCV code from GitHub, unzip it and move it into a dirictory called OpenCV and OpenCV_contrib
		
		wget -O opencv.zip https://github.com/opencv/opencv/archive/4.3.0.zip
		wget -O opencv_contrib.zip https://github.com/opencv/opencv_contrib/archive/4.3.0.zip
		unzip opencv.zip
		unzip opencv_contrib.zip
		mv opencv-4.3.0 opencv
		mv opencv_contrib-4.3.0 opencv_contrib

	Open the virtual env and do some cleanup and prep

		workon py3cv4
		cd opencv
		rm -rf build
		mkdir build
		cd build

	verify the directory you are currently in

		pwd
		ctrl+L
	
	This command prepares to complie OpenCV and determines what options to enable. This is where you enable Cuda support (see PYImagesearch.com for details)

		cmake -D CMAKE_BUILD_TYPE=RELEASE \
			-D WITH_CUDA=ON \
			-D CUDA_ARCH_PTX="" \
			-D CUDA_ARCH_BIN="5.3,6.2,7.2,7.5" \
			-D WITH_CUBLAS=ON \
			-D WITH_CUDNN=ON \
			-D OPENCV_DNN_CUDA=ON \
			-D WITH_LIBV4L=ON \
			-D BUILD_opencv_python3=ON \
			-D BUILD_opencv_python2=OFF \
			-D BUILD_opencv_java=OFF \
			-D WITH_GSTREAMER=ON \
			-D WITH_GTK=ON \
			-D BUILD_TESTS=OFF \
			-D BUILD_PERF_TESTS=OFF \
			-D BUILD_EXAMPLES=OFF \
			-D OPENCV_ENABLE_NONFREE=ON \
			-D OPENCV_EXTRA_MODULES_PATH=/home/`whoami`/opencv_contrib/modules ..

			-D ENABLE_FAST_MATH=1 \
			-D CUDA_FAST_MATH=1 \
			-D WITH_CUBLAS=1 \

	Start compiling process and go for lunch, and afternoon nap, and supper....... Just go do something else. This will take a long time 
	depending on your hardware. On the Jetson Nano this takes about 8 hours

		make -j4

	Assuming no errors install the compliled code

		sudo make install

		cd ~/.virtualenvs/py3cv4/lib/python3.6/site-packages/
		ln -s /usr/local/lib/python3.6/site-packages/cv2/python-3.6/cv2.cpython-36m-aarch64-linux-gnu.so cv2.so


	Open a python instance and check the installed version of OpenCV

		Check Installed Version
		python
		import cv2
		cv2.__version__


